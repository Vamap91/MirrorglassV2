"""
MirrorglassV2 - Aplica√ß√£o Streamlit
Sistema de Detec√ß√£o de Fraudes em Imagens Automotivas
"""

import streamlit as st
import cv2
import numpy as np
from PIL import Image
import io
from datetime import datetime
from detector_v2 import ImprovedFraudDetector, LegitimateElementDetector

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="MirrorglassV2 - Detec√ß√£o de Fraudes",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .stAlert {
        margin-top: 1rem;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.markdown('<h1 class="main-header">üöó MirrorglassV2</h1>', unsafe_allow_html=True)
st.markdown('<p style="text-align: center; font-size: 1.2rem; color: #666;">Sistema Inteligente de Detec√ß√£o de Fraudes em Imagens Automotivas</p>', unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.image("https://via.placeholder.com/300x100/1f77b4/ffffff?text=MirrorglassV2", use_container_width=True)
    
    st.markdown("---")
    st.markdown("### ‚öôÔ∏è Configura√ß√µes")
    
    debug_mode = st.checkbox("üêõ Modo Debug", value=False, help="Mostra logs detalhados no terminal")
    
    min_confidence = st.slider(
        "Confian√ßa M√≠nima",
        min_value=0.0,
        max_value=1.0,
        value=0.3,
        step=0.1,
        help="Confian√ßa m√≠nima para considerar elementos leg√≠timos"
    )
    
    st.markdown("---")
    st.markdown("### üìä Sobre o Sistema")
    st.info("""
    **MirrorglassV2** detecta:
    - ‚úÖ Textos e etiquetas
    - ‚úÖ Pap√©is e documentos  
    - ‚úÖ Reflexos de vidro
    
    Reduz **falsos positivos** em at√© 90%!
    """)
    
    st.markdown("---")
    st.markdown("### üìñ Como Usar")
    st.markdown("""
    1. üì§ Fa√ßa upload da imagem
    2. ‚è≥ Aguarde a an√°lise
    3. üìä Visualize os resultados
    4. üíæ Baixe os relat√≥rios
    """)

# √Årea principal
tab1, tab2, tab3 = st.tabs(["üì§ Upload & An√°lise", "üìä Resultados Detalhados", "‚ÑπÔ∏è Ajuda"])

with tab1:
    st.markdown("## üì§ Upload de Imagem")
    
    # Upload
    uploaded_file = st.file_uploader(
        "Escolha uma imagem para an√°lise",
        type=['png', 'jpg', 'jpeg'],
        help="Formatos suportados: PNG, JPG, JPEG"
    )
    
    if uploaded_file is not None:
        # Converter para OpenCV
        file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
        image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
        
        if image is None:
            st.error("‚ùå Erro ao carregar a imagem. Tente outro arquivo.")
        else:
            # Mostrar imagem original
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("### üñºÔ∏è Imagem Original")
                st.image(cv2.cvtColor(image, cv2.COLOR_BGR2RGB), use_container_width=True)
                st.caption(f"Dimens√µes: {image.shape[1]}x{image.shape[0]} pixels")
            
            with col2:
                st.markdown("### ‚ö° Status da An√°lise")
                
                with st.spinner("üîç Analisando imagem..."):
                    try:
                        # Criar detector
                        detector = ImprovedFraudDetector(debug=debug_mode)
                        
                        # Analisar
                        results = detector.analyze_image(image)
                        
                        # Salvar no session_state
                        st.session_state['results'] = results
                        st.session_state['image'] = image
                        st.session_state['detector'] = detector
                        
                        st.success("‚úÖ An√°lise conclu√≠da com sucesso!")
                        
                        # M√©tricas r√°pidas
                        col_m1, col_m2, col_m3 = st.columns(3)
                        
                        with col_m1:
                            st.metric(
                                "√Årea Exclu√≠da",
                                f"{results['exclusion_percentage']:.1f}%",
                                help="Percentual da imagem identificado como elemento leg√≠timo"
                            )
                        
                        with col_m2:
                            st.metric(
                                "√Årea Analis√°vel",
                                f"{results['analyzed_percentage']:.1f}%",
                                help="Percentual da imagem dispon√≠vel para an√°lise de fraude"
                            )
                        
                        with col_m3:
                            detections = results['legitimate_elements']['total_detections']
                            st.metric(
                                "Elementos Detectados",
                                detections,
                                help="Quantidade de tipos de elementos leg√≠timos encontrados"
                            )
                        
                        # Recomenda√ß√£o
                        recommendation = results['recommendation']
                        if "ALTO" in recommendation:
                            st.warning(f"‚ö†Ô∏è {recommendation}")
                        elif "M√âDIO" in recommendation:
                            st.info(f"‚ÑπÔ∏è {recommendation}")
                        else:
                            st.success(f"‚úÖ {recommendation}")
                        
                    except Exception as e:
                        st.error(f"‚ùå Erro na an√°lise: {str(e)}")
                        if debug_mode:
                            st.exception(e)

with tab2:
    st.markdown("## üìä Resultados Detalhados")
    
    if 'results' in st.session_state and 'image' in st.session_state:
        results = st.session_state['results']
        image = st.session_state['image']
        detector = st.session_state['detector']
        
        # Visualiza√ß√µes
        col_vis1, col_vis2 = st.columns(2)
        
        with col_vis1:
            st.markdown("### üé® Elementos Detectados")
            vis_image = detector.legitimate_detector.visualize_detections(image)
            st.image(cv2.cvtColor(vis_image, cv2.COLOR_BGR2RGB), use_container_width=True)
            st.caption("Verde = Texto | Azul = Papel | Amarelo = Reflexos")
        
        with col_vis2:
            st.markdown("### üó∫Ô∏è M√°scara de Exclus√£o")
            exclusion_mask = results['exclusion_mask']
            st.image(exclusion_mask, use_container_width=True, channels="GRAY")
            st.caption("Branco = √Årea exclu√≠da | Preto = √Årea analis√°vel")
        
        # Detalhes por tipo
        st.markdown("---")
        st.markdown("### üîç Detalhes dos Elementos Detectados")
        
        detections = results['legitimate_elements']['detections']
        
        if not detections:
            st.info("‚ÑπÔ∏è Nenhum elemento leg√≠timo detectado nesta imagem.")
        else:
            for det_type, det_info in detections.items():
                with st.expander(f"üìã {det_type.upper()} - Confian√ßa: {det_info['confidence']:.0%}", expanded=True):
                    col_det1, col_det2, col_det3 = st.columns(3)
                    
                    with col_det1:
                        st.metric("Confian√ßa", f"{det_info['confidence']:.1%}")
                    
                    with col_det2:
                        st.metric("√Årea (pixels)", f"{det_info['area_pixels']:,}")
                    
                    with col_det3:
                        x, y, w, h = det_info['bbox']
                        st.metric("BBox", f"{w}x{h}")
                    
                    # Metadados espec√≠ficos
                    if 'metadata' in det_info and det_info['metadata']:
                        st.markdown("**Metadados:**")
                        
                        if det_type == 'text' and 'texts' in det_info['metadata']:
                            texts = det_info['metadata']['texts']
                            if texts:
                                st.write(f"Textos encontrados: {', '.join(texts)}")
                        
                        if det_type == 'paper' and 'paper_count' in det_info['metadata']:
                            st.write(f"Quantidade de pap√©is: {det_info['metadata']['paper_count']}")
                        
                        if det_type == 'reflection' and 'reflection_percentage' in det_info['metadata']:
                            st.write(f"Cobertura de reflexos: {det_info['metadata']['reflection_percentage']:.2f}%")
        
        # Download dos resultados
        st.markdown("---")
        st.markdown("### üíæ Download dos Resultados")
        
        col_down1, col_down2, col_down3 = st.columns(3)
        
        with col_down1:
            # Download da visualiza√ß√£o
            vis_img_pil = Image.fromarray(cv2.cvtColor(vis_image, cv2.COLOR_BGR2RGB))
            buf_vis = io.BytesIO()
            vis_img_pil.save(buf_vis, format='PNG')
            buf_vis.seek(0)
            
            st.download_button(
                label="üì• Baixar Visualiza√ß√£o",
                data=buf_vis,
                file_name=f"mirrorglass_detections_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png",
                mime="image/png",
                use_container_width=True
            )
        
        with col_down2:
            # Download da m√°scara
            mask_pil = Image.fromarray(exclusion_mask)
            buf_mask = io.BytesIO()
            mask_pil.save(buf_mask, format='PNG')
            buf_mask.seek(0)
            
            st.download_button(
                label="üì• Baixar M√°scara",
                data=buf_mask,
                file_name=f"mirrorglass_mask_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png",
                mime="image/png",
                use_container_width=True
            )
        
        with col_down3:
            # Download do JSON
            import json
            results_json = results.copy()
            # Remover m√°scaras numpy (n√£o serializ√°veis)
            del results_json['exclusion_mask']
            
            json_str = json.dumps(results_json, indent=2, ensure_ascii=False)
            
            st.download_button(
                label="üì• Baixar JSON",
                data=json_str,
                file_name=f"mirrorglass_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json",
                use_container_width=True
            )
    
    else:
        st.info("‚ÑπÔ∏è Fa√ßa upload de uma imagem na aba 'Upload & An√°lise' para ver os resultados detalhados.")

with tab3:
    st.markdown("## ‚ÑπÔ∏è Ajuda e Documenta√ß√£o")
    
    st.markdown("### üéØ Objetivo do Sistema")
    st.write("""
    O **MirrorglassV2** foi desenvolvido para detectar fraudes em vistorias automotivas, 
    identificando quando imagens foram manipuladas por IA para:
    
    - **Criar danos falsos**: Carro est√° OK, mas IA cria amassados/riscos para cobrar conserto inexistente
    - **Ocultar danos reais**: Carro est√° danificado, mas IA "conserta" a foto para cobrar conserto n√£o realizado
    """)
    
    st.markdown("### üîß Como Funciona")
    st.write("""
    O sistema identifica e **exclui elementos leg√≠timos** que podem causar falsos positivos:
    
    1. **Textos e Etiquetas**: Detecta usando OCR (Tesseract)
    2. **Pap√©is e Documentos**: Identifica regi√µes uniformes com bordas retangulares
    3. **Reflexos de Vidro**: Analisa canais HSV e gradientes suaves
    
    Ap√≥s excluir esses elementos, a an√°lise de fraude foca apenas nas √°reas relevantes do ve√≠culo.
    """)
    
    st.markdown("### üìä Interpretando os Resultados")
    
    col_help1, col_help2 = st.columns(2)
    
    with col_help1:
        st.markdown("#### √Årea Exclu√≠da")
        st.write("""
        - **< 10%**: Imagem limpa, an√°lise completa
        - **10-40%**: Presen√ßa moderada de elementos
        - **40-70%**: Muitos elementos leg√≠timos
        - **> 70%**: An√°lise muito limitada
        """)
    
    with col_help2:
        st.markdown("#### Confian√ßa")
        st.write("""
        - **< 30%**: Detec√ß√£o incerta
        - **30-60%**: Detec√ß√£o prov√°vel
        - **60-80%**: Detec√ß√£o confi√°vel
        - **> 80%**: Detec√ß√£o muito confi√°vel
        """)
    
    st.markdown("### ‚ö†Ô∏è Limita√ß√µes")
    st.warning("""
    - O sistema **n√£o detecta fraudes por IA diretamente** (ainda)
    - Ele apenas **elimina falsos positivos** causados por elementos leg√≠timos
    - √â a **Fase 1** de um sistema maior de detec√ß√£o de fraudes
    - Requer imagens com boa qualidade e ilumina√ß√£o adequada
    """)
    
    st.markdown("### üÜò Problemas Comuns")
    
    with st.expander("‚ùì OCR n√£o detecta textos"):
        st.write("""
        **Poss√≠veis causas:**
        - Texto muito pequeno ou desfocado
        - Baixo contraste entre texto e fundo
        - Texto em √¢ngulo muito inclinado
        
        **Solu√ß√£o:** Ajuste a confian√ßa m√≠nima ou melhore a qualidade da imagem.
        """)
    
    with st.expander("‚ùì Falsos positivos em pap√©is"):
        st.write("""
        **Poss√≠veis causas:**
        - √Åreas da lataria muito uniformes
        - Reflexos que parecem pap√©is
        
        **Solu√ß√£o:** Aumente o threshold de uniformidade no c√≥digo ou capture fotos de √¢ngulos diferentes.
        """)
    
    with st.expander("‚ùì Reflexos n√£o detectados"):
        st.write("""
        **Poss√≠veis causas:**
        - Reflexos muito fracos
        - Ilumina√ß√£o muito difusa
        
        **Solu√ß√£o:** Ajuste os thresholds HSV no c√≥digo ou use modo debug para ver valores.
        """)
    
    st.markdown("---")
    st.markdown("### üìû Suporte")
    st.info("""
    **Vers√£o:** 2.0.0  
    **Projeto:** MirrorglassV2 - Detec√ß√£o de Fraudes Automotivas  
    **Desenvolvido para:** Eliminar falsos positivos em detec√ß√£o de fraudes por IA
    """)

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666; padding: 2rem 0;">
    <p>üöó <strong>MirrorglassV2</strong> | Detec√ß√£o Inteligente de Fraudes Automotivas</p>
    <p style="font-size: 0.9rem;">Desenvolvido com ‚ù§Ô∏è usando Streamlit + OpenCV + Python</p>
</div>
""", unsafe_allow_html=True)
